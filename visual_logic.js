"use strict";

/**
 * Generated by Verge3D Puzzles v.2.1.0
 * Wed Mar 07 2018 19:49:54 GMT-0500 (EST)
 * Do not edit this file.
 */

(function() {

// global variables used by blocks' functions
var _puzzleVars = {};
_puzzleVars.objClickCallbacks = [];
_puzzleVars.loopTrap = 1000;
_puzzleVars.frameRate = 24;
_puzzleVars.pickedObject = "";
_puzzleVars.mediaElements = {};

var PL = v3d.PL = v3d.PL || {};

PL.legacyMode = false;

PL.init = function(appInstance) {

var tex_flag;

// utility function envoked by almost all V3D-specific blocks
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
   if (!objNames)
       return;
   if (typeof objNames == "string")
       objNames = [objNames];
   else if (Array.isArray(objNames) && objNames[0] == "GROUP")
       objNames = getObjectNamesByGroupName(objNames[1]);
   else if (Array.isArray(objNames) && objNames[0] == "ALL_OBJECTS")
       objNames = getAllObjectNames();
   return objNames;
}

// utility function envoked by almost all V3D-specific blocks
// find first occurence of the object by its name
function getObjectByName(objName) {
   var objFound;
   appInstance.scene.traverse(function(obj){
       if (!objFound && notIgnoredObj(obj) && (obj.name == objName))
           objFound = obj;
   });
   return objFound;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
   var objNameList = [];
   appInstance.scene.traverse(function(obj){
       if (notIgnoredObj(obj)) {
           var groupNames = obj.groupNames;
           if (!groupNames)
               return;
           for (var i = 0; i < groupNames.length; i++) {
               var groupName = groupNames[i];
               if (groupName == targetGroupName) {
                   objNameList.push(obj.name);
               }
           }
       }
   });
   return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects on the scene
function getAllObjectNames() {
   var objNameList = [];
   appInstance.scene.traverse(function(obj){
       if (notIgnoredObj(obj))
           objNameList.push(obj.name)
   });
   return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// filter off some non-mesh types
function notIgnoredObj(obj) {
   return (obj.type != "Scene" &&
           obj.type != "AmbientLight" &&
           obj.name != "" &&
           (obj.parent && obj.parent.type != "Group"));
}

// assignMaterial block
function assignMat(objNames, matName) {
   objNames = retrieveObjectNames(objNames);
   if (!objNames || !matName)
       return;
   var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
   if (!mat)
       return;
   for (var i = 0; i < objNames.length; i++) {
       var objName = objNames[i];
       if (!objName)
           continue;
       var obj = getObjectByName(objName);
       if (obj)
           obj.material = mat;
   }
}

// whenClicked block
function initObjectPicking(callback) {
   var elem = appInstance.renderer.domElement;
   elem.addEventListener("mousedown", onMouseDown, false);
   elem.addEventListener("touchend", onTouchEnd, false);
   var raycaster = new v3d.Raycaster();
   var mouse = new v3d.Vector2();
   function onTouchEnd(event) {
       event.preventDefault();
       event.clientX = event.changedTouches[0].clientX;
       event.clientY = event.changedTouches[0].clientY;
       onMouseDown(event);
   }
   function onMouseDown(event) {
       event.preventDefault();
       mouse.x = (event.clientX / elem.clientWidth) * 2 - 1;
       mouse.y = -(event.clientY / elem.clientHeight) * 2 + 1;
       raycaster.setFromCamera(mouse, appInstance.camera);
       var objList = [];
       appInstance.scene.traverse(function(obj){objList.push(obj);});
       var intersects = raycaster.intersectObjects(objList);
       if (intersects.length > 0) {
           var obj = intersects[0].object;
           callback(obj);
       } else {
           callback(null);
       }
   }
}

// whenClicked block
initObjectPicking(function(obj) {
   if (!obj)
       return;
   // save the object for the pickedObject block
   if (obj.parent && obj.parent.type == "Group") {
       // auto-generated from a multi-material object, save parent name instead
       _puzzleVars.pickedObject = obj.parent.name;
   } else {
       _puzzleVars.pickedObject = obj.name;
   }
   // match with the target object and fire the callbacks
   for (var i = 0; i < _puzzleVars.objClickCallbacks.length; i++) {
       var cb = _puzzleVars.objClickCallbacks[i];
       var targetObjName = cb[0];
       var fun = cb[1];
       if (obj.name == targetObjName) {
           fun();
       // also check children which are auto-generated for multi-material objects
       } else {
           var targetObj = getObjectByName(targetObjName);
           if (targetObj.type == "Group") {
               for (var j = 0; j < targetObj.children.length; j++) {
                   var child = targetObj.children[j];
                   if (obj.name == child.name)
                       fun();
               }
           }
       }
   }
});

// whenClicked block
function registerOnClick(objNames, callback) {
   objNames = retrieveObjectNames(objNames);
   if (!objNames)
       return;
   for (var i = 0; i < objNames.length; i++) {
       var objName = objNames[i];
       if (!objName) continue;
       _puzzleVars.objClickCallbacks.push([objName, callback]);
   }
}


tex_flag = 1;

registerOnClick("parcel-contour", function() {
  if (tex_flag) {
    assignMat("parcel-contour", "Material.001");
    tex_flag = 0;
  } else {
    assignMat("parcel-contour", "template_material");
    tex_flag = 1;
  }
});

2 % 2 == 0;

}

if (window.v3dApp) {
   // backwards compatibility for old player projects
   PL.legacyMode = true;
   PL.init(window.v3dApp);
}

})();

/* ================== end of code ================== */